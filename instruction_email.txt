1. Копіюємо наш проект, робимо pipenv install щоб всі наші залежності встановились з Pipfile

2. Будемо робити верифікацію пошти:
додаємо в models.py дядок:
confirmed: Mapped[bool] = mapped_column(Boolean, default=False, nullable=True)

3. Робимо міграції:
alembic revision --autogenerate -m "add verification email"
alembic upgrade head

4. В routers auth.py в функції async def login допишемо перевірку чи email True
if not user.confirmed:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Email not confirmed")

5. Дістанемо BackgroundTask для відправки листів

signup функція дописуємо bt:BackgroundTask

6. pipenv install fastapi-mail

7. repository users.py дописываем функцию, что верифицирует нам пароль и меняет на True:
async def confirmed_email(email: str, db: AsyncSession) -> None:
    user = await get_user_by_email(email, db)
    user.confirmed = True
    await db.commit()

8. services створимо папку templates в ній файл verify_email.html:
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Verify Email</title>
</head>
<body>
<p>Hi {{username}},</p>
<p>Thank you for signing up for our service.</p>
<p>Please click the following link to verify your email address:</p>
<p>
    <a href="{{host}}api/auth/confirmed_email/{{token}}">
        Verification
    </a>
    <img src="http://127.0.0.1:8000/static/open_check.png" alt="">
    <img src="http://127.0.0.1:8000/api/auth/{{username}}" alt="">
    <img src="https://fastapi-check-open.krabaton.repl.co/checkopen/{{username}}" alt="">
</p>
<p>If you did not sign up for our service, please ignore this email.</p>
<p>Thanks,</p>
<p>The Our Team</p>
</body>
</html>



9.  services створимо файл email.py :
from pathlib import Path

from fastapi_mail import FastMail, MessageSchema, ConnectionConfig, MessageType
from fastapi_mail.errors import ConnectionErrors
from pydantic import EmailStr

from src.services.auth import auth_service

conf = ConnectionConfig(
    MAIL_USERNAME="natalihomenko83@meta.ua",
    MAIL_PASSWORD="Az150209Az",
    MAIL_FROM="natalihomenko83@meta.ua",
    MAIL_PORT=465,
    MAIL_SERVER="smtp.meta.ua",
    MAIL_FROM_NAME="Contacts Company",
    MAIL_STARTTLS=False,
    MAIL_SSL_TLS=True,
    USE_CREDENTIALS=True,
    VALIDATE_CERTS=True,
    TEMPLATE_FOLDER=Path(__file__).parent / 'templates',
)


async def send_email(email: EmailStr, username: str, host: str):
    try:
        token_verification = auth_service.create_email_token({"sub": email})
        message = MessageSchema(
            subject="Confirm your email ",
            recipients=[email],
            template_body={"host": host, "username": username, "token": token_verification},
            subtype=MessageType.html
        )

        fm = FastMail(conf)
        await fm.send_message(message, template_name="verify_email.html")
    except ConnectionErrors as err:
        print(err)


10. Йдемо в services auth.py й додаємо функцію reate_email_token:
def create_email_token(self, data: dict):
        to_encode = data.copy()
        now = datetime.now(timezone.utc)
        expire = now + timedelta(days=1)
        to_encode.update({"iat": now, "exp": expire})
        token = jwt.encode(to_encode, self.SECRET_KEY, algorithm=self.ALGORITHM)
        return token


11. routers auth.py signup дописуємо:
  bt.add_task(send_email, new_user.email, new_user.username, str(request.base_url))


12. src/routes/auth.py
@router.get('/confirmed_email/{token}')
async def confirmed_email(token: str, db: AsyncSession = Depends(get_db)):
    email = await auth_service.get_email_from_token(token)
    user = await repositories_users.get_user_by_email(email, db)
    if user is None:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Verification error")
    if user.confirmed:
        return {"message": "Your email is already confirmed"}
    await repositories_users.confirmed_email(email, db)
    return {"message": "Email confirmed"}


13. src/services/auth.py
async def get_email_from_token(self, token: str):
        try:
            payload = jwt.decode(token, self.SECRET_KEY, algorithms=[self.ALGORITHM])
            email = payload["sub"]
            return email
        except JWTError as e:
            print(e)
            raise HTTPException(status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
                                detail="Invalid token for email verification")


14 Повторне надсилання листа:
src/routes/auth.py

@router.post('/request_email')
async def request_email(body: RequestEmail, background_tasks: BackgroundTasks, request: Request,
                        db: AsyncSession = Depends(get_db)):
    user = await repositories_users.get_user_by_email(body.email, db)

    if user.confirmed:
        return {"message": "Your email is already confirmed"}
    if user:
        background_tasks.add_task(send_email, user.email, user.username, request.base_url)
    return {"message": "Check your email for confirmation."}


15. src/user_schemas.py
class RequestEmail(BaseModel):
    email: EmailStr
